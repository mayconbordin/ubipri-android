package com.gppdi.ubipri.dao;

import com.gppdi.ubipri.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ENVIRONMENT".
 */
public class Environment {

    private Long id;
    /** Not-null value. */
    private String name;
    private double latitude;
    private double longitude;
    private double operatingRange;
    private int version;
    private Double distance;
    /** Not-null value. */
    private String shape;
    private long environmentTypeId;
    private long localizationTypeId;
    private Long parentId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EnvironmentDao myDao;

    private Environment environment;
    private Long environment__resolvedKey;

    private LocalizationType localizationType;
    private Long localizationType__resolvedKey;

    private Environment parent;
    private Long parent__resolvedKey;


    public Environment() {
    }

    public Environment(Long id) {
        this.id = id;
    }

    public Environment(Long id, String name, double latitude, double longitude, double operatingRange, int version, Double distance, String shape, long environmentTypeId, long localizationTypeId, Long parentId) {
        this.id = id;
        this.name = name;
        this.latitude = latitude;
        this.longitude = longitude;
        this.operatingRange = operatingRange;
        this.version = version;
        this.distance = distance;
        this.shape = shape;
        this.environmentTypeId = environmentTypeId;
        this.localizationTypeId = localizationTypeId;
        this.parentId = parentId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEnvironmentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public double getLatitude() {
        return latitude;
    }

    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }

    public double getLongitude() {
        return longitude;
    }

    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }

    public double getOperatingRange() {
        return operatingRange;
    }

    public void setOperatingRange(double operatingRange) {
        this.operatingRange = operatingRange;
    }

    public int getVersion() {
        return version;
    }

    public void setVersion(int version) {
        this.version = version;
    }

    public Double getDistance() {
        return distance;
    }

    public void setDistance(Double distance) {
        this.distance = distance;
    }

    /** Not-null value. */
    public String getShape() {
        return shape;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setShape(String shape) {
        this.shape = shape;
    }

    public long getEnvironmentTypeId() {
        return environmentTypeId;
    }

    public void setEnvironmentTypeId(long environmentTypeId) {
        this.environmentTypeId = environmentTypeId;
    }

    public long getLocalizationTypeId() {
        return localizationTypeId;
    }

    public void setLocalizationTypeId(long localizationTypeId) {
        this.localizationTypeId = localizationTypeId;
    }

    public Long getParentId() {
        return parentId;
    }

    public void setParentId(Long parentId) {
        this.parentId = parentId;
    }

    /** To-one relationship, resolved on first access. */
    public Environment getEnvironment() {
        long __key = this.environmentTypeId;
        if (environment__resolvedKey == null || !environment__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EnvironmentDao targetDao = daoSession.getEnvironmentDao();
            Environment environmentNew = targetDao.load(__key);
            synchronized (this) {
                environment = environmentNew;
            	environment__resolvedKey = __key;
            }
        }
        return environment;
    }

    public void setEnvironment(Environment environment) {
        if (environment == null) {
            throw new DaoException("To-one property 'environmentTypeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.environment = environment;
            environmentTypeId = environment.getId();
            environment__resolvedKey = environmentTypeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public LocalizationType getLocalizationType() {
        long __key = this.localizationTypeId;
        if (localizationType__resolvedKey == null || !localizationType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocalizationTypeDao targetDao = daoSession.getLocalizationTypeDao();
            LocalizationType localizationTypeNew = targetDao.load(__key);
            synchronized (this) {
                localizationType = localizationTypeNew;
            	localizationType__resolvedKey = __key;
            }
        }
        return localizationType;
    }

    public void setLocalizationType(LocalizationType localizationType) {
        if (localizationType == null) {
            throw new DaoException("To-one property 'localizationTypeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.localizationType = localizationType;
            localizationTypeId = localizationType.getId();
            localizationType__resolvedKey = localizationTypeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Environment getParent() {
        Long __key = this.parentId;
        if (parent__resolvedKey == null || !parent__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EnvironmentDao targetDao = daoSession.getEnvironmentDao();
            Environment parentNew = targetDao.load(__key);
            synchronized (this) {
                parent = parentNew;
            	parent__resolvedKey = __key;
            }
        }
        return parent;
    }

    public void setParent(Environment parent) {
        synchronized (this) {
            this.parent = parent;
            parentId = parent == null ? null : parent.getId();
            parent__resolvedKey = parentId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
